// Generated by CoffeeScript 1.6.3
(function() {
  var $;

  $ = window.jQuery || window.Zepto || window.$;

  $.fn.fancySelect = function(opts) {
    var isiOS, settings, clicked = false;
    settings = $.extend({
      forceiOS: false
    }, opts);
    isiOS = !!navigator.userAgent.match(/iP(hone|od|ad)/i);
    return this.each(function() {
      var copyOptionsToList, disabled, options, sel, trigger, updateTriggerText, wrapper, toggleSelect, toggleEmptySelect;
      sel = $(this);
      if (sel.hasClass('fancified') || sel[0].tagName !== 'SELECT') {
        return;
      }
      sel.addClass('fancified');
      sel.css({
        width: 1,
        height: 1,
        display: 'block',
        position: 'absolute',
        top: 0,
        left: 0,
        opacity: 0
      });
      sel.wrap('<div class="fancy-select">');
      wrapper = sel.parent();
      if (sel.data('class')) {
        wrapper.addClass(sel.data('class'));
      }
      wrapper.append('<div class="trigger">');
      if (!(isiOS && !settings.forceiOS)) {
        wrapper.append('<ul class="options">');
      }
      trigger = wrapper.find('.trigger');
      options = wrapper.find('.options');

      // BEGIN NUTANIX CHANGES
      //---------------------------------

      // Toggle the 'disabled' class on select
      // based on the 'disabled' property
      toggleSelect = function() {
        // Make disable if set in element attribute or if list is empty
        disabled = sel.prop('disabled') || !sel.find('option').length;
        if (disabled) {
          sel.prop('disabled', true);
          wrapper.addClass('disabled');
        } else {
          sel.prop('disabled', false);
          wrapper.removeClass('disabled');
          disabled = false;
        }
      };

      toggleSelect();


      // END NUTANIX CHANGES
      //---------------------------------

      updateTriggerText = function() {
        // BEGIN NUTANIX CHANGES
        //---------------------------------
        var selectedElement = sel.find(':selected');
        var tiggerText = selectedElement.text().length ?
          selectedElement.text() : 'No Applicable Option';

        // Add the selected class so the tick mark will appear
        // against selected option in dropdown.
        options.find('.selected').removeClass('selected');
        options.find('[data-value="' + sel.val() + '"]').addClass('selected');
        // END NUTANIX CHANGES
        //---------------------------------
        return trigger.text(tiggerText);
      };
      sel.on('blur', function() {
        if (trigger.hasClass('open')) {
          return setTimeout(function() {
            return trigger.trigger('close');
          }, 120);
        }
      });
      trigger.on('close', function() {
        var parent = sel.parent();
        if(!parent.is(':hover') || (parent.is(':hover') && clicked)) {
          clicked = false;
          trigger.removeClass('open');
          return options.removeClass('open');
        }
      });
      // Commented because mouseout is not a meaningful event on a select box.
      // sel.parent().on('mouseout', function() {
      //   sel.trigger('focus');
      // });
      trigger.on('click', function() {
        var offParent, parent;
        if (!disabled) {
          trigger.toggleClass('open');
          if (isiOS && !settings.forceiOS) {
            if (trigger.hasClass('open')) {
              return sel.focus();
            }
          } else {
            if (trigger.hasClass('open')) {
              parent = trigger.parent();
              offParent = parent.offsetParent();
              // NUTANIX CHANGES
              //----------------
              if ((parent.offset().top + parent.outerHeight() + options.outerHeight() + 20) > $(window).height()) {
                options.add(trigger).addClass('overflowing');
              } else {
                options.add(trigger).removeClass('overflowing');
              }
              // NUTANIX CHANGES END
              //--------------------
            }
            options.toggleClass('open');
            // BEGIN NUTANIX CHANGES
            //---------------------------------
            if (trigger.hasClass('open')) {
              trigger.trigger('open');
            }
            // END NUTANIX CHANGES
            //---------------------------------
            if (!isiOS) {
              return sel.focus();
            }
          }
        }
      });
      sel.on('enable', function() {
        sel.prop('disabled', false);

        // BEGIN NUTANIX CHANGES
        //---------------------------------

        toggleSelect();
        return sel.trigger('update');

        // END NUTANIX CHANGES
        //---------------------------------
      });
      sel.on('disable', function() {
        sel.prop('disabled', true);

        // BEGIN NUTANIX CHANGES
        //---------------------------------

        toggleSelect();
        return disabled = true;

        // END NUTANIX CHANGES
        //---------------------------------
      });
      sel.on('change', function(e) {
        if (e.originalEvent && e.originalEvent.isTrusted) {
          return e.stopPropagation();
        } else {
          return updateTriggerText();
        }
      });
      sel.on('keydown', function(e) {
        var hovered, newHovered, w;
        w = e.which;
        hovered = options.find('.hover');
        hovered.removeClass('hover');
        if (!options.hasClass('open')) {
          if (w === 13 || w === 32 || w === 38 || w === 40) {
            e.preventDefault();
            return trigger.trigger('click');
          }
        } else {
          if (w === 38) {
            e.preventDefault();
            if (hovered.length && hovered.index() > 0) {
              hovered.prev().addClass('hover');
            } else {
              options.find('li:last-child').addClass('hover');
            }
          } else if (w === 40) {
            e.preventDefault();
            if (hovered.length && hovered.index() < options.find('li').length - 1) {
              hovered.next().addClass('hover');
            } else {
              options.find('li:first-child').addClass('hover');
            }
          } else if (w === 27) {
            e.preventDefault();
            trigger.trigger('click');
          } else if (w === 13 || w === 32) {
            e.preventDefault();
            hovered.trigger('click');
          } else if (w === 9) {
            if (trigger.hasClass('open')) {
              trigger.trigger('close');
            }
          }
          newHovered = options.find('.hover');
          if (newHovered.length) {
            options.scrollTop(0);
            return options.scrollTop(newHovered.position().top - 12);
          }
        }
      });
      options.on('click', 'li', function(e) {
        // JQuery .data('value') is always try  to convert the numeric string
        // to a Javascript object.  See JQuery API doc for more details
        sel.val($(this).attr('data-value'));
        if (!isiOS) {
          sel.trigger('blur').trigger('focus');
        }
        options.find('.selected').removeClass('selected');
        $(e.currentTarget).addClass('selected');
        clicked = true;
        return sel.val($(this).attr('data-value')).trigger('change')
          .trigger('blur').trigger('focus');
      });
      options.on('mouseenter', 'li', function() {
        var hovered, nowHovered;
        nowHovered = $(this);
        hovered = options.find('.hover');
        hovered.removeClass('hover');
        return nowHovered.addClass('hover');
      });
      options.on('mouseleave', 'li', function() {
        return options.find('.hover').removeClass('hover');
      });
      copyOptionsToList = function() {
        updateTriggerText();
        if (isiOS && !settings.forceiOS) {
          return;
        }

        // BEGIN NUTANIX CHANGES
        //---------------------------------

        // Copy options to list
        var result = sel.find('option').each(function(i, opt) {
          opt = $(opt);
          if (!opt.prop('disabled')) {
            // NUTANIX CHANGES
            //----------------
            var title = opt.prop('title'),
                liElement;

            if (opt.prop('selected')) {
              liElement = $("<li data-value=\"" + (opt.val()) + "\" title=\"" + (opt.text().trim()) + "\" class=\"selected\">" + (opt.text()) + "</li>");
            } else {
              liElement = $("<li data-value=\"" + (opt.val()) + "\" title=\"" + (opt.text().trim()) + "\">" + (opt.text()) + "</li>");
            }

            if (title) {
              liElement.prop('title', title);
            }
            return options.append(liElement);
            // NUTANIX CHANGES END
            //--------------------
          }
        });

        return result;

        // END NUTANIX CHANGES
        //---------------------------------
      };
      sel.on('update', function() {
        wrapper.find('.options').empty();
        return copyOptionsToList();
      });
      return copyOptionsToList();
    });
  };

}).call(this);
